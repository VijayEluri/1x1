/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JMailLoadGeneratorFrame.java
 *
 * Created on 20.11.2008, 21:19:59
 */
package jmailloadgenerator;

import com.sun.mail.smtp.SMTPSendFailedException;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.LineNumberReader;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.*;
import java.util.Properties;
import java.util.Queue;
import java.util.ResourceBundle;
import java.util.concurrent.LinkedBlockingDeque;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author uli
 */
public class JMailLoadGeneratorFrame extends javax.swing.JFrame
{

    public static final String alphanumericCharset =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    /** Creates new form JMailLoadGeneratorFrame */
    public JMailLoadGeneratorFrame()
    {
        initComponents();
        try
        {
            //Init members
            digest = MessageDigest.getInstance("SHA-1");
        }
        catch (NoSuchAlgorithmException ex)
        {
            Logger.getLogger(JMailLoadGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //If the config file exists, read the data from the previous session
        File configFile = new File(".jmailloadgenerator");
        if (configFile.exists())
        {
            LineNumberReader lr = null;
            try
            {
                lr = new LineNumberReader(new FileReader(configFile));
                serverField.setText(lr.readLine());
                userNameField.setText(lr.readLine());
                targetField.setText(lr.readLine());
                fromField.setText(lr.readLine());
                countSpinner.setValue(new Integer(lr.readLine()));
                subjectLengthSpinner.setValue(new Integer(lr.readLine()));
                bodyLengthSpinner.setValue(new Integer(lr.readLine()));
                lr.close();
            }
            catch (IOException ex)
            {
                Logger.getLogger(JMailLoadGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (NumberFormatException ex)
            {/*May occur when the config file is not up to date*/

            }
            finally
            {
                try
                {
                    lr.close();
                }
                catch (IOException ex)
                {
                    Logger.getLogger(JMailLoadGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverLabel = new javax.swing.JLabel();
        serverField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        countLabel = new javax.swing.JLabel();
        countSpinner = new javax.swing.JSpinner();
        okButton = new javax.swing.JButton();
        targetLabel = new javax.swing.JLabel();
        targetField = new javax.swing.JTextField();
        fromLabel = new javax.swing.JLabel();
        fromField = new javax.swing.JTextField();
        subjectLengthLabel = new javax.swing.JLabel();
        subjectLengthSpinner = new javax.swing.JSpinner();
        mailProgressBar = new javax.swing.JProgressBar();
        messageScrollPane = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        bodyLengthSpinner = new javax.swing.JSpinner();
        bodyLengthLabel = new javax.swing.JLabel();
        debugCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(i18n.getString("JMailLoadGeneratorFrame.title")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                mainFrameClosing(evt);
            }
        });

        serverLabel.setText(i18n.getString("JMailLoadGeneratorFrame.serverLabel.text")); // NOI18N

        serverField.setText(i18n.getString("JMailLoadGeneratorFrame.serverField.text")); // NOI18N

        userNameLabel.setText(i18n.getString("JMailLoadGeneratorFrame.userNameLabel.text")); // NOI18N

        userNameField.setText(i18n.getString("JMailLoadGeneratorFrame.userNameField.text")); // NOI18N

        passwordLabel.setText(i18n.getString("JMailLoadGeneratorFrame.passwordLabel.text")); // NOI18N

        passwordField.setText(i18n.getString("JMailLoadGeneratorFrame.passwordField.text")); // NOI18N

        countLabel.setText(i18n.getString("JMailLoadGeneratorFrame.countLabel.text")); // NOI18N

        countSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(100), Integer.valueOf(0), null, Integer.valueOf(1)));

        okButton.setText(i18n.getString("JMailLoadGeneratorFrame.okButton.text")); // NOI18N
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        targetLabel.setText(i18n.getString("JMailLoadGeneratorFrame.targetLabel.text")); // NOI18N

        targetField.setText(i18n.getString("JMailLoadGeneratorFrame.targetField.text")); // NOI18N

        fromLabel.setText(i18n.getString("JMailLoadGeneratorFrame.fromLabel.text")); // NOI18N

        fromField.setText(i18n.getString("JMailLoadGeneratorFrame.fromField.text")); // NOI18N

        subjectLengthLabel.setText(i18n.getString("JMailLoadGeneratorFrame.subjectLengthLabel.text")); // NOI18N

        subjectLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 1, 100, 1));

        mailProgressBar.setToolTipText(i18n.getString("JMailLoadGeneratorFrame.mailProgressBar.toolTipText")); // NOI18N

        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        messageTextArea.setToolTipText(i18n.getString("JMailLoadGeneratorFrame.messageTextArea.toolTipText")); // NOI18N
        messageScrollPane.setViewportView(messageTextArea);

        bodyLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(32768), Integer.valueOf(1), null, Integer.valueOf(1)));

        bodyLengthLabel.setText(i18n.getString("JMailLoadGeneratorFrame.bodyLengthLabel.text")); // NOI18N

        debugCheckbox.setText(i18n.getString("JMailLoadGeneratorFrame.debugCheckbox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bodyLengthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bodyLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(subjectLengthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(subjectLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(serverLabel)
                                    .addComponent(userNameLabel)
                                    .addComponent(passwordLabel)
                                    .addComponent(countLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(serverField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(countSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(14, 14, 14))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(targetLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                            .addComponent(targetField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(fromLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                            .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(debugCheckbox)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(mailProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addComponent(messageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(messageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serverLabel)
                            .addComponent(serverField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userNameLabel)
                            .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordLabel)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(countLabel)
                            .addComponent(countSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subjectLengthLabel)
                            .addComponent(subjectLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bodyLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bodyLengthLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(targetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(targetLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mailProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(okButton)
                            .addComponent(debugCheckbox))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_okButtonMouseClicked
    {//GEN-HEADEREND:event_okButtonMouseClicked

        new Thread(new Runnable()
        {

            public void run()
            {
                try
                {
                    Properties props = System.getProperties();
                    props.put("mail.smtp.host", serverField.getText());
                    props.put("mail.smtp.starttls.enable", true);
                    props.put("mail.smtp.user", userNameField.getText());
                    props.put("mail.transport.protocol", "smtp");
                    props.put("mail.smtp.auth", "true");
                    if(debugCheckbox.isSelected()){props.put("mail.debug", "true");}
                    else{props.put("mail.debug", "false");}
                    Session session =
                            Session.getInstance(props,
                            new javax.mail.Authenticator()
                            {

                                @Override
                                protected PasswordAuthentication getPasswordAuthentication()
                                {
                                    return new PasswordAuthentication(userNameField.getText(), new String(passwordField.getPassword()));
                                }
                            });
                    //Get the count and length of rand
                    int count = getCount();
                    int subjectLength = getSubjectLength();
                    //Init the progress bar
                    mailProgressBar.setMaximum(count);
                    mailProgressBar.setString("0 mails sent");
                    //Start a thread to fill the body queue
                    startBodyGenThread();
                    //Initialize the transport object the
                    Transport tr = session.getTransport("smtp");
                    tr.connect(serverField.getText(), userNameField.getText(), new String(passwordField.getPassword()));
                    //Maind send loop
                    for (int i = 0; i < count; i++)
                    {
                        //Create the message
                        MimeMessage message =
                                new MimeMessage(session);
                        message.setFrom(new InternetAddress(fromField.getText()));
                        message.addRecipient(Message.RecipientType.TO, new InternetAddress(targetField.getText()));
                        message.setSubject(getRand(subjectLength));
                        message.setText(bodyQueue.poll());
                        message.saveChanges();
                        //Send the message
                        tr.sendMessage(message, message.getAllRecipients());
                        //Update the progress bar
                        mailProgressBar.setValue(i);
                        mailProgressBar.setString(Integer.toString(i) + " mails sent");
                    }
                    tr.close();
                }
                catch (SMTPSendFailedException ex)
                {
                    messageTextArea.append(ex.toString());
                    Logger.getLogger(JMailLoadGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (AuthenticationFailedException ex)
                {
                    messageTextArea.append(ex.toString());
                    Logger.getLogger(JMailLoadGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (MessagingException ex)
                {
                    Logger.getLogger(JMailLoadGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
    }//GEN-LAST:event_okButtonMouseClicked

    private void mainFrameClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_mainFrameClosing
    {//GEN-HEADEREND:event_mainFrameClosing
        try
        {
            /**
             * Write the text field values (except password) to the config file
             */
            FileWriter fout = new FileWriter(".jmailloadgenerator");
            fout.write(serverField.getText() + "\n");
            fout.write(userNameField.getText() + "\n");
            fout.write(targetField.getText() + "\n");
            fout.write(fromField.getText() + "\n");
            fout.write(Integer.toString(getCount()) + "\n");
            fout.write(Integer.toString(getSubjectLength()) + "\n");
            fout.write(Integer.toString(getBodyLength()) + "\n");
            fout.close();
        }
        catch (IOException ex)
        {
            Logger.getLogger(JMailLoadGeneratorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

}//GEN-LAST:event_mainFrameClosing

    private String getRand(int len)
    {
        int alphanumericLen = alphanumericCharset.length();
        StringBuilder ret = new StringBuilder(len);
        for (; len > 0; len--)
        {
            ret.append(alphanumericCharset.charAt(mt.nextInt(alphanumericLen)));
        }
        return ret.toString();
    }

    /**
     * Starts a thread that fills bodyQueue
     */
    private void startBodyGenThread()
    {
        new Thread(new Runnable()
        {

            public void run()
            {
                int count = getCount();
                final int bodyLen = getBodyLength();
                bodyQueue.clear();
                /**
                 * Each iteration a new String of size bodyLen is added to the Queue
                 */
                for (; count > 0; count--)
                {
                    bodyQueue.offer(getRand(bodyLen));
                }
            }
        }).start();
    }

    private int getCount()
    {
        SpinnerNumberModel countModel =
                (SpinnerNumberModel) countSpinner.getModel();
        return countModel.getNumber().intValue();
    }

    private int getSubjectLength()
    {
        SpinnerNumberModel subjectLengthModel =
                (SpinnerNumberModel) subjectLengthSpinner.getModel();
        return subjectLengthModel.getNumber().intValue();
    }

    private int getBodyLength()
    {
        SpinnerNumberModel bodyLengthModel =
                (SpinnerNumberModel) bodyLengthSpinner.getModel();
        return bodyLengthModel.getNumber().intValue();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new JMailLoadGeneratorFrame().setVisible(true);
            }
        });
    }
    private ResourceBundle i18n =
            ResourceBundle.getBundle("jmailloadgenerator/Bundle");
    private MersenneTwisterFast mt = new MersenneTwisterFast();
    private MessageDigest digest;
    private Queue<String> bodyQueue = new LinkedBlockingDeque<String>(); //Contains random bodies
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bodyLengthLabel;
    private javax.swing.JSpinner bodyLengthSpinner;
    private javax.swing.JLabel countLabel;
    private javax.swing.JSpinner countSpinner;
    private javax.swing.JCheckBox debugCheckbox;
    private javax.swing.JTextField fromField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JProgressBar mailProgressBar;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField serverField;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JLabel subjectLengthLabel;
    private javax.swing.JSpinner subjectLengthSpinner;
    private javax.swing.JTextField targetField;
    private javax.swing.JLabel targetLabel;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables
}
