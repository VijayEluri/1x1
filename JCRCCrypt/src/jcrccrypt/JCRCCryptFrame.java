/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JCRCCryptFrame.java
 *
 * Created on 19.04.2009, 19:46:16
 */
package jcrccrypt;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.CRC32;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author uli
 */
public class JCRCCryptFrame extends javax.swing.JFrame
{

    /** Creates new form JCRCCryptFrame */
    public JCRCCryptFrame()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileLabel = new javax.swing.JLabel();
        selectInputFileButton = new javax.swing.JButton();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        okButton = new javax.swing.JButton();
        decryptCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle( i18n.getString("JCRCCryptFrame.title")); // NOI18N

        inputFileLabel.setText( i18n.getString("JCRCCryptFrame.inputFileLabel.text")); // NOI18N

        selectInputFileButton.setText( i18n.getString("JCRCCryptFrame.selectInputFileButton.text")); // NOI18N
        selectInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectInputFileButtonActionPerformed(evt);
            }
        });

        passwordLabel.setText( i18n.getString("JCRCCryptFrame.passwordLabel.text")); // NOI18N

        okButton.setText( i18n.getString("JCRCCryptFrame.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        decryptCheckbox.setText( i18n.getString("JCRCCryptFrame.decryptCheckbox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputFileLabel)
                    .addComponent(passwordLabel)
                    .addComponent(decryptCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(selectInputFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileLabel)
                    .addComponent(selectInputFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(decryptCheckbox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectInputFileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectInputFileButtonActionPerformed
    {//GEN-HEADEREND:event_selectInputFileButtonActionPerformed
        inputFileChooser.showOpenDialog(this);
        inputFilename = inputFileChooser.getSelectedFile().getAbsolutePath();
        if(inputFilename.endsWith(".crypt"))
        {
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run()
                {
                    decryptCheckbox.setSelected(true);
                }
            });
            outputFilename = inputFilename.substring(0, inputFilename.length() - ".crypt".length());
        }
        else
        {
            outputFilename = inputFilename + ".crypt";
        }
    }//GEN-LAST:event_selectInputFileButtonActionPerformed

    private void decrypt()
    {
        InputStream fin = null;
        OutputStream out = null;
        try
        {
            CRC32 crc = new CRC32();
            crc.update(new String(passwordField.getPassword()).getBytes());
            long seed = crc.getValue();

            //Seed the MT with the checksum
            MersenneTwisterFast rand = new MersenneTwisterFast(seed);
            byte[] buffer = new byte[4096];
            byte[] randBuffer = new byte[4096];
            int read;
            fin = new GZIPInputStream(new Base64.InputStream(new BufferedInputStream(new FileInputStream(inputFilename))));
            out = new BufferedOutputStream(new FileOutputStream(outputFilename));
            while (fin.available() > 0)
            {
                rand.nextBytes(randBuffer);
                //Read max. 4096 bytes and write them to the output stream
                read = fin.read(buffer);
                for (int i = 0; i < read; i++)
                {
                    buffer[i] ^= randBuffer[i];
                }
                out.write(buffer, 0, read);
            }
        }
        catch (IOException ex)
        {
            Logger.getLogger(JCRCCryptFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                fin.close();
                out.close();
            }
            catch (NullPointerException ex)
            {
            }
            catch (IOException ex)
            {
                Logger.getLogger(JCRCCryptFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void encrypt()
    {
        InputStream fin = null;
        OutputStream out = null;
        try
        {
            CRC32 crc = new CRC32();
            crc.update(new String(passwordField.getPassword()).getBytes());
            long seed = crc.getValue();

            //Seed the MT with the checksum
            MersenneTwisterFast rand = new MersenneTwisterFast(seed);
            byte[] buffer = new byte[4096];
            byte[] randBuffer = new byte[4096];
            int read;
            fin = new BufferedInputStream(new FileInputStream(inputFilename));
            out = new GZIPOutputStream(new Base64.OutputStream(new BufferedOutputStream(new FileOutputStream(outputFilename))));
            while (fin.available() > 0)
            {
                rand.nextBytes(randBuffer);
                //Read max. 4096 bytes and write them to the output stream
                read = fin.read(buffer);
                for (int i = 0; i < read; i++)
                {
                    buffer[i] ^= randBuffer[i];
                }
                out.write(buffer, 0, read);
            }
        }
        catch (IOException ex)
        {
            Logger.getLogger(JCRCCryptFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                fin.close();
                out.close();
            }
            catch (NullPointerException ex)
            {
            }
            catch (IOException ex)
            {
                Logger.getLogger(JCRCCryptFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        if(inputFilename == null)
        {
            JOptionPane.showMessageDialog(this, "Select an input file first!", "No input file", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(decryptCheckbox.isSelected())
        {
            decrypt();
        }
        else
        {
            encrypt();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new JCRCCryptFrame().setVisible(true);
            }
        });
    }
    private JFileChooser inputFileChooser = new JFileChooser();
    private String inputFilename = null;
            private String outputFilename = null;
    private ResourceBundle i18n = ResourceBundle.getBundle("jcrccrypt/Bundle");
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox decryptCheckbox;
    private javax.swing.JLabel inputFileLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton selectInputFileButton;
    // End of variables declaration//GEN-END:variables
}
