/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ECSignerFrame.java
 *
 * Created on 10.09.2008, 19:57:18
 */

package jcrypter.ecc;

import JCrypter.utils.KeyFinder;
import java.io.*;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.*;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import jcrypter.*;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Base64;

/**
 *
 * @author uli
 */
public class ECSignerFrame extends javax.swing.JFrame {
    
    Map<String, ECPublicKey> pubkeys = new HashMap<String, ECPublicKey>();
    Map<String, ECPrivateKey> privkeys = new HashMap<String, ECPrivateKey>();

    /** Creates new form ECSignerFrame */
    public ECSignerFrame() {
        initComponents();
        //Register Bouncy castle provider
        Security.addProvider(new BouncyCastleProvider());
        //Load the keys
        KeyFinder kf = new KeyFinder(".ecp", ".ecp", "ECDSA");
        for(String s : kf.getNames())
        {
            keyComboBox.addItem(s);
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        plaintextScrollPane = new javax.swing.JScrollPane();
        messageField = new javax.swing.JTextArea();
        signVerifyVutton = new javax.swing.JButton();
        signatureLabel = new javax.swing.JLabel();
        keyLabel = new javax.swing.JLabel();
        ciphertextScrollPane = new javax.swing.JScrollPane();
        signatureField = new javax.swing.JTextArea();
        keyComboBox = new javax.swing.JComboBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadFromFileMenuItem = new javax.swing.JMenuItem();
        saveToFileMenuItem = new javax.swing.JMenuItem();
        eccMenu = new javax.swing.JMenu();
        generateKeyMenuItem = new javax.swing.JMenuItem();

        setTitle(i18n.getString("ECSignerFrame.title")); // NOI18N

        messageLabel.setDisplayedMnemonic('i');
        messageLabel.setText(i18n.getString("ECSignerFrame.messageLabel.text")); // NOI18N

        messageField.setColumns(20);
        messageField.setLineWrap(true);
        messageField.setRows(5);
        plaintextScrollPane.setViewportView(messageField);

        signVerifyVutton.setMnemonic('o');
        signVerifyVutton.setText(i18n.getString("ECSignerFrame.signVerifyVutton.text")); // NOI18N
        signVerifyVutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signVerifyVuttonMouseClicked(evt);
            }
        });

        signatureLabel.setDisplayedMnemonic('o');
        signatureLabel.setText(i18n.getString("ECSignerFrame.signatureLabel.text")); // NOI18N

        keyLabel.setText(i18n.getString("ECSignerFrame.keyLabel.text")); // NOI18N

        signatureField.setColumns(20);
        signatureField.setEditable(false);
        signatureField.setLineWrap(true);
        signatureField.setRows(5);
        ciphertextScrollPane.setViewportView(signatureField);

        keyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));

        fileMenu.setText(i18n.getString("ECSignerFrame.fileMenu.text")); // NOI18N

        loadFromFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        loadFromFileMenuItem.setMnemonic('l');
        loadFromFileMenuItem.setText(i18n.getString("ECSignerFrame.loadFromFileMenuItem.text")); // NOI18N
        loadFromFileMenuItem.setToolTipText(i18n.getString("ECSignerFrame.loadFromFileMenuItem.toolTipText")); // NOI18N
        loadFromFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadFromFileMenuItem);

        saveToFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveToFileMenuItem.setMnemonic('s');
        saveToFileMenuItem.setText(i18n.getString("ECSignerFrame.saveToFileMenuItem.text")); // NOI18N
        saveToFileMenuItem.setToolTipText(i18n.getString("ECSignerFrame.saveToFileMenuItem.toolTipText")); // NOI18N
        saveToFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveToFileMenuItem);

        menuBar.add(fileMenu);

        eccMenu.setText(i18n.getString("ECSignerFrame.eccMenu.text")); // NOI18N

        generateKeyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        generateKeyMenuItem.setText(i18n.getString("ECSignerFrame.generateKeyMenuItem.text")); // NOI18N
        generateKeyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKeyMenuItemActionPerformed(evt);
            }
        });
        eccMenu.add(generateKeyMenuItem);

        menuBar.add(eccMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageLabel)
                    .addComponent(signatureLabel)
                    .addComponent(keyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signVerifyVutton, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addComponent(keyComboBox, 0, 302, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(plaintextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageLabel)
                    .addComponent(plaintextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signVerifyVutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyLabel))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(signatureLabel)
                    .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signVerifyVuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signVerifyVuttonMouseClicked
        signECC();
}//GEN-LAST:event_signVerifyVuttonMouseClicked

    private void loadFromFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromFileMenuItemActionPerformed
        FileInputStream fin = null;
        try
        {
            fileChooser.showOpenDialog(this);
            File file = fileChooser.getSelectedFile();
            byte[] buffer = new byte[(int) file.length()];
            fin = new FileInputStream(file);
            fin.read(buffer);
            fin.close();
            messageField.setText(new String(buffer));
        }
        catch (IOException ex)
        {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        finally
        {
            try
            {
                fin.close();
            }
            catch (IOException ex)
            {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
}//GEN-LAST:event_loadFromFileMenuItemActionPerformed

    private void saveToFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileMenuItemActionPerformed
        FileOutputStream fout = null;
        try
        {
            fileChooser.showSaveDialog(this);
            File file = fileChooser.getSelectedFile();
            byte[] buffer = signatureField.getText().getBytes();
            fout = new FileOutputStream(file);
            fout.write(buffer);
            fout.close();
        }
        catch (IOException ex)
        {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                fout.close();
            }
            catch (IOException ex)
            {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
}//GEN-LAST:event_saveToFileMenuItemActionPerformed

private void generateKeyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKeyMenuItemActionPerformed
    new ECKeyGeneratorFrame().setVisible(true);
}//GEN-LAST:event_generateKeyMenuItemActionPerformed

    private void signECC() //Encrypt using elliptic curve cryptography
    {
        try
        {
            String plaintext = messageField.getText();
            String keySelection = (String) keyComboBox.getSelectedItem();
            if(keySelection.endsWith(".ecp")) //Sign
            {
                    ECPublicKey key = pubkeys.get(keySelection);
                    //TODO Make using ECGOST possible
                    Cipher cipher = Cipher.getInstance("ECGOST-3410", "BC");
                    cipher.init(Cipher.ENCRYPT_MODE, key);
                    byte[] ciphertext = cipher.doFinal(plaintext.getBytes());
                    signatureField.setText(new String(Base64.encode(ciphertext)));
            }
        }



        catch (IllegalBlockSizeException ex)
        {
            Logger.getLogger(ECSignerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (BadPaddingException ex)
        {
            Logger.getLogger(ECSignerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (NoSuchAlgorithmException ex)
        {
            Logger.getLogger(ECSignerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (NoSuchProviderException ex)
        {
            Logger.getLogger(ECSignerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (NoSuchPaddingException ex)
        {
            Logger.getLogger(ECSignerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (InvalidKeyException ex)
        {
            ex.printStackTrace();
        }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ECSignerFrame().setVisible(true);
            }
        });
    }
    
    //Cryptography members

    //Dialog members
    JFileChooser fileChooser = new JFileChooser();
    
    ResourceBundle i18n = ResourceBundle.getBundle("jcrypter/ecc/Bundle");
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ciphertextScrollPane;
    private javax.swing.JMenu eccMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem generateKeyMenuItem;
    private javax.swing.JComboBox keyComboBox;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JMenuItem loadFromFileMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea messageField;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JScrollPane plaintextScrollPane;
    private javax.swing.JMenuItem saveToFileMenuItem;
    private javax.swing.JButton signVerifyVutton;
    private javax.swing.JTextArea signatureField;
    private javax.swing.JLabel signatureLabel;
    // End of variables declaration//GEN-END:variables

}
