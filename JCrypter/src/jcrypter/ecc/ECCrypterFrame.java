/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ECCrypterFrame.java
 *
 * Created on 10.09.2008, 19:57:18
 */

package jcrypter.ecc;

import java.io.*;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.logging.*;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import jcrypter.*;
import org.bouncycastle.util.encoders.Base64;

/**
 *
 * @author uli
 */
public class ECCrypterFrame extends javax.swing.JFrame {
    
    Map<String, ECPublicKey> pubkeys = new HashMap<String, ECPublicKey>();
    Map<String, ECPrivateKey> privkeys = new HashMap<String, ECPrivateKey>();

    /** Creates new form ECCrypterFrame */
    public ECCrypterFrame() {
        initComponents();
        //////////////
        //Load .ecp and .ecs files from this directory and append each filename to the combobox
        /////////////
        //Load public keys
        try
        {
            File thisDir = new File(".");
            File[] ecp = thisDir.listFiles(new FilenameFilter() {
                        @Override
                        public boolean accept(File arg0, String arg1) {
                            if(arg1.endsWith(".ecp")) {return true;}
                            return false;
                        }
                    });
            for(File f : ecp)
            {
                ObjectInputStream oin = new ObjectInputStream(
                                            new BufferedInputStream(
                                                new FileInputStream(f)));
                ECPublicKey pubKey = (ECPublicKey) oin.readObject();
                pubkeys.put(f.getName(), pubKey);

                keyComboBox.addItem(f.getName());
            }
            //Load private keys
            File[] ecs = thisDir.listFiles(new FilenameFilter() {
                        @Override
                        public boolean accept(File arg0, String arg1) {
                            if(arg1.endsWith(".ecs")) {return true;}
                            return false;
                        }
                    });
            for(File f : ecs)
            {
                ObjectInputStream oin = new ObjectInputStream(
                                            new BufferedInputStream(
                                                new FileInputStream(f)));
                ECPrivateKey privKey = (ECPrivateKey) oin.readObject();
                privkeys.put(f.getName(), privKey);

                keyComboBox.addItem(f.getName());
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputLabel = new javax.swing.JLabel();
        plaintextScrollPane = new javax.swing.JScrollPane();
        inputField = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        ciphertextLabel = new javax.swing.JLabel();
        keyLabel = new javax.swing.JLabel();
        ciphertextScrollPane = new javax.swing.JScrollPane();
        outputField = new javax.swing.JTextArea();
        keyComboBox = new javax.swing.JComboBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadFromFileMenuItem = new javax.swing.JMenuItem();
        saveToFileMenuItem = new javax.swing.JMenuItem();
        eccMenu = new javax.swing.JMenu();
        selectCurveMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inputLabel.setDisplayedMnemonic('i');
        inputLabel.setText(i18n.getString("ECCrypterFrame.inputLabel.text")); // NOI18N

        inputField.setColumns(20);
        inputField.setLineWrap(true);
        inputField.setRows(5);
        plaintextScrollPane.setViewportView(inputField);

        okButton.setMnemonic('o');
        okButton.setText(i18n.getString("ECCrypterFrame.okButton.text")); // NOI18N
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        ciphertextLabel.setDisplayedMnemonic('o');
        ciphertextLabel.setText(i18n.getString("ECCrypterFrame.ciphertextLabel.text")); // NOI18N

        keyLabel.setText(i18n.getString("ECCrypterFrame.keyLabel.text")); // NOI18N

        outputField.setColumns(20);
        outputField.setEditable(false);
        outputField.setLineWrap(true);
        outputField.setRows(5);
        ciphertextScrollPane.setViewportView(outputField);

        keyComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));

        fileMenu.setText(i18n.getString("ECCrypterFrame.fileMenu.text")); // NOI18N

        loadFromFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        loadFromFileMenuItem.setMnemonic('l');
        loadFromFileMenuItem.setText(i18n.getString("ECCrypterFrame.loadFromFileMenuItem.text")); // NOI18N
        loadFromFileMenuItem.setToolTipText(i18n.getString("ECCrypterFrame.loadFromFileMenuItem.toolTipText")); // NOI18N
        loadFromFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadFromFileMenuItem);

        saveToFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveToFileMenuItem.setMnemonic('s');
        saveToFileMenuItem.setText(i18n.getString("ECCrypterFrame.saveToFileMenuItem.text")); // NOI18N
        saveToFileMenuItem.setToolTipText(i18n.getString("ECCrypterFrame.saveToFileMenuItem.toolTipText")); // NOI18N
        saveToFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveToFileMenuItem);

        menuBar.add(fileMenu);

        eccMenu.setText(i18n.getString("ECCrypterFrame.eccMenu.text")); // NOI18N

        selectCurveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        selectCurveMenuItem.setText(i18n.getString("ECCrypterFrame.selectCurveMenuItem.text")); // NOI18N
        selectCurveMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectCurveMenuItemMouseClicked(evt);
            }
        });
        eccMenu.add(selectCurveMenuItem);

        menuBar.add(eccMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(inputLabel)
                        .addComponent(keyLabel))
                    .addComponent(ciphertextLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(plaintextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(keyComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 317, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel)
                    .addComponent(plaintextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyLabel)
                    .addComponent(keyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ciphertextLabel)
                    .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked
        encryptECC();
}//GEN-LAST:event_okButtonMouseClicked

    private void loadFromFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromFileMenuItemActionPerformed
        FileInputStream fin = null;
        try {
            fileChooser.showOpenDialog(this);
            File file = fileChooser.getSelectedFile();
            byte[] buffer = new byte[(int)file.length()];
            fin = new FileInputStream(file);
            fin.read(buffer);
            fin.close();
            inputField.setText(new String(buffer));
        } catch (IOException ex) {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } finally {
            try {
                fin.close();
            } catch (IOException ex) {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
}//GEN-LAST:event_loadFromFileMenuItemActionPerformed

    private void saveToFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileMenuItemActionPerformed
        FileOutputStream fout = null;
        try {
            fileChooser.showSaveDialog(this);
            File file = fileChooser.getSelectedFile();
            byte[] buffer = outputField.getText().getBytes();
            fout = new FileOutputStream(file);
            fout.write(buffer);
            fout.close();
        } catch (IOException ex) {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fout.close();
            } catch (IOException ex) {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        }
}//GEN-LAST:event_saveToFileMenuItemActionPerformed

private void selectCurveMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectCurveMenuItemMouseClicked
    keygenFrame.setVisible(true);
}//GEN-LAST:event_selectCurveMenuItemMouseClicked

    private void encryptECC() //Encrypt using elliptic curve cryptography
    {
        try
        {
            String plaintext = inputField.getText();
            String keySelection = (String) keyComboBox.getSelectedItem();
            if(keySelection.endsWith(".ecp")) //Encrypt
            {
                    ECPublicKey key = pubkeys.get(keySelection);
                    //TODO Make using ECGOST possible
                    Cipher cipher = Cipher.getInstance("ECDSA", "BC");
                    cipher.init(Cipher.ENCRYPT_MODE, key);
                    byte[] ciphertext = cipher.doFinal(plaintext.getBytes());
                    outputField.setText(new String(Base64.encode(ciphertext)));
            }
        }
        catch (IllegalBlockSizeException ex)
        {
            Logger.getLogger(ECCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (BadPaddingException ex)
        {
            Logger.getLogger(ECCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (NoSuchAlgorithmException ex)
        {
            Logger.getLogger(ECCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NoSuchProviderException ex)
        {
            Logger.getLogger(ECCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NoSuchPaddingException ex)
        {
            Logger.getLogger(ECCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        catch (InvalidKeyException ex)
        {
            ex.printStackTrace();
        }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ECCrypterFrame().setVisible(true);
            }
        });
    }
    
    //Cryptography members

    //Dialog members
    JFileChooser fileChooser = new JFileChooser();
    
    ECKeyGeneratorFrame keygenFrame = new ECKeyGeneratorFrame();
    
    ResourceBundle i18n = ResourceBundle.getBundle("jcrypter/ecc/Bundle");
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ciphertextLabel;
    private javax.swing.JScrollPane ciphertextScrollPane;
    private javax.swing.JMenu eccMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextArea inputField;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JComboBox keyComboBox;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JMenuItem loadFromFileMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton okButton;
    private javax.swing.JTextArea outputField;
    private javax.swing.JScrollPane plaintextScrollPane;
    private javax.swing.JMenuItem saveToFileMenuItem;
    private javax.swing.JMenuItem selectCurveMenuItem;
    // End of variables declaration//GEN-END:variables

}
