/*
 * JCrypterFrame.java
 *
 * Created on 26. Juli 2008, 17:47
 */

package jcrypter;

import gnu.crypto.hash.HashFactory;
import gnu.crypto.hash.IMessageDigest;
import gnu.crypto.mode.*;
import gnu.crypto.pad.IPad;
import gnu.crypto.pad.PadFactory;
import gnu.crypto.pad.WrongPaddingException;
import java.security.InvalidKeyException;
import java.security.SecureRandom;
import java.util.*;
import java.util.logging.*;

/**
 *
 * @author  uli
 */
public class JCrypterFrame extends javax.swing.JFrame {
    
    /** Creates new form JCrypterFrame */
    public JCrypterFrame() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        plaintextScrollPane = new javax.swing.JScrollPane();
        plaintextTextArea = new javax.swing.JTextArea();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        ciphertextLabel = new javax.swing.JLabel();
        ciphertextScrollPane = new javax.swing.JScrollPane();
        ciphertextField = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        algorithmComboBox = new javax.swing.JComboBox();
        decryptCheckbox = new javax.swing.JCheckBox();
        modeComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Input:");

        plaintextTextArea.setColumns(20);
        plaintextTextArea.setRows(5);
        plaintextScrollPane.setViewportView(plaintextTextArea);

        passwordLabel.setText("Password:");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        ciphertextLabel.setText("Output:");

        ciphertextField.setColumns(20);
        ciphertextField.setLineWrap(true);
        ciphertextField.setRows(5);
        ciphertextScrollPane.setViewportView(ciphertextField);

        okButton.setText("OK");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Serpent", "Twofish", "AES" }));

        decryptCheckbox.setText("Decrypt");
        decryptCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptCheckboxActionPerformed(evt);
            }
        });

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ECB", "CBC", "ICM", "OFB", "CTR" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plaintextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ciphertextLabel)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(decryptCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                            .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(plaintextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptCheckbox)
                    .addComponent(okButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ciphertextLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void decryptCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_decryptCheckboxActionPerformed

    private byte[] sha256sum(char[] input)
    {
        IMessageDigest md = HashFactory.getInstance("SHA-256");
        String i = new String(input);
        md.update(i.getBytes(), 0, i.length());
        return md.digest();
        
    }
    
    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked
        // TODO add your handling code here:
        //Variable prototypes
         String algorithm = null;
         String mode = null;
         char[] password = passwordField.getPassword();
         short cbsize = 0; //Cipher block size
         StringBuilder ctcb; //Ciphertext StringBuilder
         SecureRandom random = new SecureRandom();
         String input = plaintextTextArea.getText();
         boolean decrypt = decryptCheckbox.isSelected();
        //Get data
         //Set algorithm and mode variables
         switch(algorithmComboBox.getSelectedIndex()) //Switch algorithm
         {
             case 0: algorithm = "Serpent";cbsize = 32;break;
             case 1: algorithm = "Twofish";cbsize = 16;break;
             case 2: algorithm = "AES";cbsize = 16;break;
         }
         switch(modeComboBox.getSelectedIndex()) //Switch mode
         {
             case 0: mode = "Serpent";break;
             case 1: mode = "Twofish";break;
             case 2: mode = "AES";break;
         }
        //Init IV
         byte[] iv = new byte[cbsize];
        //Init GnuCrypto variables
         IMode imode = ModeFactory.getInstance(mode, algorithm, cbsize);
         Map attributes = new HashMap();
         attributes.put(IMode.KEY_MATERIAL, sha256sum(password));
         attributes.put(IMode.IV, iv);
         attributes.put(IMode.CIPHER_BLOCK_SIZE, new Integer(cbsize));
         try{imode.init(attributes);}
           catch (InvalidKeyException ex) {Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);}
           catch (IllegalStateException ex) {Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);}
         int bs = imode.currentBlockSize(); //Retrieve our current block size
        //Decide whether we have to encrypt or to decrypt
         if(decrypt){attributes.put(IMode.STATE, new Integer(IMode.DECRYPTION));}
         else{attributes.put(IMode.STATE, new Integer(IMode.ENCRYPTION));}
        //Fill up plaintext
         IPad padding = PadFactory.getInstance("PKCS7");
         padding.init(bs);
         //Pad or unpad depending on the state = whether we have to decrypt or to encrypt
          byte[] paddedInput = null;
          byte[] inputBytes = input.getBytes();
          if(decrypt)
             {
              int endOffset = 0;
              try{endOffset = padding.unpad(inputBytes, 0, input.length());}
                 catch(WrongPaddingException ex){Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);}
              //Get the right substring from the padding
              paddedInput = new String(inputBytes).substring(0, inputBytes.length - endOffset).getBytes();
             }
          else{paddedInput = padding.pad(inputBytes, 0, input.length());}
        //Now crypt
        byte[] output = new byte[paddedInput.length];
          for(int i = 0;i < paddedInput.length; i += bs)
              {
                imode.update(paddedInput, i, output, i);
              }
        ciphertextField.setText(new String(output));
    }//GEN-LAST:event_okButtonMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JCrypterFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JTextArea ciphertextField;
    private javax.swing.JLabel ciphertextLabel;
    private javax.swing.JScrollPane ciphertextScrollPane;
    private javax.swing.JCheckBox decryptCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox modeComboBox;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JScrollPane plaintextScrollPane;
    private javax.swing.JTextArea plaintextTextArea;
    // End of variables declaration//GEN-END:variables
    
}
