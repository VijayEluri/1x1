/*
 * JCrypterFrame.java
 *
 * Created on 26. Juli 2008, 17:47
 * http://1x1.googlecode.com
 * GNUCrypto version: Revision 122
 * Released under Apache License
 */

package jcrypter;

import jcrypter.pgp.PGPKeyRingReader;
import jcrypter.pgp.PGPCrypterFrame;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import org.bouncycastle.crypto.*;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Base64;

/**
 *
 * @author  uli
 */
public class JCrypterFrame extends javax.swing.JFrame {
    
    /** Creates new form JCrypterFrame */
    public JCrypterFrame() {
        //Register Bouncy castle provider
        Security.addProvider(new BouncyCastleProvider());  
        //Init the GUI components
        initComponents();
    }

    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputLabel = new javax.swing.JLabel();
        plaintextScrollPane = new javax.swing.JScrollPane();
        inputField = new javax.swing.JTextArea();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        ciphertextLabel = new javax.swing.JLabel();
        ciphertextScrollPane = new javax.swing.JScrollPane();
        outputField = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        decryptCheckbox = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadFromFileMenuItem = new javax.swing.JMenuItem();
        saveToFileMenuItem = new javax.swing.JMenuItem();
        extrasMenu = new javax.swing.JMenu();
        pgpMenuItem = new javax.swing.JMenuItem();
        cipherModeMenuItem = new javax.swing.JMenuItem();
        eccMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JCrypter");

        inputLabel.setDisplayedMnemonic('i');
        inputLabel.setLabelFor(inputField);
        inputLabel.setText("Input:");

        inputField.setColumns(20);
        inputField.setLineWrap(true);
        inputField.setRows(5);
        plaintextScrollPane.setViewportView(inputField);

        passwordLabel.setDisplayedMnemonic('p');
        passwordLabel.setLabelFor(passwordField);
        passwordLabel.setText("Password:");

        ciphertextLabel.setDisplayedMnemonic('o');
        ciphertextLabel.setLabelFor(outputField);
        ciphertextLabel.setText("Output:");

        outputField.setColumns(20);
        outputField.setEditable(false);
        outputField.setLineWrap(true);
        outputField.setRows(5);
        ciphertextScrollPane.setViewportView(outputField);

        okButton.setMnemonic('o');
        okButton.setText("OK");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        decryptCheckbox.setMnemonic('d');
        decryptCheckbox.setText("Decrypt");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        loadFromFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        loadFromFileMenuItem.setMnemonic('l');
        loadFromFileMenuItem.setText("Load from file");
        loadFromFileMenuItem.setToolTipText("Load data from a file into the input field");
        loadFromFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadFromFileMenuItem);

        saveToFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveToFileMenuItem.setMnemonic('s');
        saveToFileMenuItem.setText("Save to file");
        saveToFileMenuItem.setToolTipText("Save the data from the output field to a file");
        saveToFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveToFileMenuItem);

        menuBar.add(fileMenu);

        extrasMenu.setMnemonic('e');
        extrasMenu.setText("Extras");

        pgpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        pgpMenuItem.setText("PGP");
        pgpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pgpMenuItemActionPerformed(evt);
            }
        });
        extrasMenu.add(pgpMenuItem);

        cipherModeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        cipherModeMenuItem.setText("Cipher and Mode");
        cipherModeMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cipherModeMenuItemMouseClicked(evt);
            }
        });
        cipherModeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherModeMenuItemActionPerformed(evt);
            }
        });
        extrasMenu.add(cipherModeMenuItem);

        eccMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        eccMenuItem.setText("ECC");
        eccMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eccMenuItemActionPerformed(evt);
            }
        });
        extrasMenu.add(eccMenuItem);

        menuBar.add(extrasMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passwordLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(plaintextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(decryptCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ciphertextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel)
                    .addComponent(plaintextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptCheckbox)
                    .addComponent(okButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ciphertextLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    @SuppressWarnings("empty-statement")
    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked
        encryptSymmetric();
    }//GEN-LAST:event_okButtonMouseClicked

    private void cipherModeMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cipherModeMenuItemMouseClicked
        cipherDialog.setVisible(true);
        //new CipherModePaddingSelectorDialog(this, false).setVisible(true);//GEN-HEADEREND:event_cipherModeMenuItemMouseClicked
    }//GEN-LAST:event_cipherModeMenuItemMouseClicked

    private void cipherModeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherModeMenuItemActionPerformed
        cipherDialog.setVisible(true);
    }//GEN-LAST:event_cipherModeMenuItemActionPerformed

    private void pgpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pgpMenuItemActionPerformed
        new PGPCrypterFrame().setVisible(true);
    }//GEN-LAST:event_pgpMenuItemActionPerformed

    private void loadFromFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromFileMenuItemActionPerformed
        FileInputStream fin = null;
        try
            {
                fileChooser.showOpenDialog(this);
                File file = fileChooser.getSelectedFile();
                byte[] buffer = new byte[(int)file.length()];
                fin = new FileInputStream(file);
                fin.read(buffer);
                fin.close();
                inputField.setText(new String(buffer));
            }
        catch (IOException ex)
            {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        finally
            {
                try
                    {
                    fin.close();
                    }
                catch (IOException ex)
                    {
                    Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                    }
            }
    }//GEN-LAST:event_loadFromFileMenuItemActionPerformed

    private void saveToFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileMenuItemActionPerformed
        FileOutputStream fout = null;
        try
            {
                fileChooser.showSaveDialog(this);
                File file = fileChooser.getSelectedFile();
                byte[] buffer = outputField.getText().getBytes();
                fout = new FileOutputStream(file);
                fout.write(buffer);
                fout.close();
            }
        catch (IOException ex)
            {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        finally
            {
                try
                    {
                     fout.close();
                    }
                catch (IOException ex)
                    {
                    Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                    }
            }
    }//GEN-LAST:event_saveToFileMenuItemActionPerformed

    private void eccMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eccMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eccMenuItemActionPerformed

    
    private void encryptSymmetric()
    {
        try
        {
            boolean decrypt = decryptCheckbox.isSelected();
            //Using BouncyCastle JCE
            Cipher cipher = Cipher.getInstance(cipherName + "/" + modeName + "/" + paddingName + "Padding", "BC");
            int bs = cipher.getBlockSize(); //Blocksize
            //Get data
            byte[] passwordBytes = new String(passwordField.getPassword()).getBytes();
            byte[] input;
            //Base64-decode the ciphertext
            if(decrypt) {input = Base64.decode(inputField.getText().getBytes());}
            else {input = inputField.getText().getBytes();}
            
            //Hash the password to fit it into the right size
            Digest digest = new SHA256Digest();
            digest.update(passwordBytes, 0, passwordBytes.length);
            byte[] keyBytes = new byte[32];
            digest.doFinal(keyBytes, 0);

            //State whether to encrypt or to decrypt
            int cryptMode;
            if(decrypt) {cryptMode = Cipher.DECRYPT_MODE;}
            else {cryptMode = Cipher.ENCRYPT_MODE;}

            //IV generation/retrievement
            byte[] iv = null;
            if(decrypt)
            {
                iv = input; //Using iv array only with offset
            }
            else
            {
                //Generate the iv and the IvParameter spec
                iv = new byte[cipher.getBlockSize()];
                rand.nextBytes(iv);                
            }
            IvParameterSpec ivSpec = new IvParameterSpec(iv, 0, bs);

            //Generate the secret key spec
            SecretKeySpec keySpec = new SecretKeySpec(keyBytes, cipherName);
            cipher.init(cryptMode, keySpec, ivSpec);
            
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            CipherOutputStream cout = new CipherOutputStream(bout, cipher);
            
            //If print the IV into bout
            if(!decrypt){bout.write(iv);}
            //Print the input (minus the IV, if decrypting) into cout
            if(decrypt){cout.write(input, bs, input.length - bs);}
            else{cout.write(input);}
            //All data has been written
            cout.close();
            bout.close();
            //Print the output into outputField and Base64-encode if we have to encrypt
            if(decrypt) {outputField.setText(new String(bout.toByteArray()));}
            else {outputField.setText(new String(Base64.encode(bout.toByteArray())));}
        }
        catch (InvalidAlgorithmParameterException ex)
            {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        catch (IOException ex) //Must not occure
            {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
            }
        catch (InvalidKeyException ex)
            {
            Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        catch (NoSuchAlgorithmException ex)
            {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        catch (NoSuchProviderException ex)
            {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
        catch (NoSuchPaddingException ex)
            {
                Logger.getLogger(JCrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JCrypterFrame().setVisible(true);
            }
        });
    }
    
    //Encryption variables
    PGPKeyRingReader pkr = null;
    public static SecureRandom rand = new SecureRandom();
    private String cipherName = "Twofish";
    private String modeName = "CBC";
    private String paddingName = "PKCS7";
    private final String[] ciphers = {"Serpent","Twofish", "AES", "CAST5", "Camellia", "IDEA"};
    private final String[] modes = {"ECB", "CBC", "CCM", "CFB", "CTS", "EAX", "GCM", "GOF", "OFB", "SIC"};
    private final String[] paddings = {"PKCS7", "TBC", "X923", "No", "ZeroByte", "ISO10126d2", "ISO 7816d4"};

    //Dialog members
    CipherModePaddingSelectorDialog cipherDialog = new CipherModePaddingSelectorDialog(this, true);
    JFileChooser fileChooser = new JFileChooser();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cipherModeMenuItem;
    private javax.swing.JLabel ciphertextLabel;
    private javax.swing.JScrollPane ciphertextScrollPane;
    private javax.swing.JCheckBox decryptCheckbox;
    private javax.swing.JMenuItem eccMenuItem;
    private javax.swing.JMenu extrasMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextArea inputField;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JMenuItem loadFromFileMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton okButton;
    private javax.swing.JTextArea outputField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JMenuItem pgpMenuItem;
    private javax.swing.JScrollPane plaintextScrollPane;
    private javax.swing.JMenuItem saveToFileMenuItem;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the cipherName
     */
    public String getCipher()
        {
        return cipherName;
        }

    /**
     * @param cipherName the cipherName to set
     */
    public void setCipher(String cipher)
        {
        this.cipherName = cipher;
        }

    /**
     * @return the modeName
     */
    public String getMode()
        {
        return modeName;
        }

    /**
     * @param modeName the modeName to set
     */
    public void setMode(String mode)
        {
        this.modeName = mode;
        }

    /**
     * @return the paddingName
     */
    public String getPadding()
        {
        return paddingName;
        }

    /**
     * @param paddingName the paddingName to set
     */
    public void setPadding(String padding)
        {
        this.paddingName = padding;
        }

    /**
     * @return the ciphers
     */
    public String[] getCiphers()
        {
        return ciphers;
        }

    /**
     * @return the modes
     */
    public String[] getModes()
        {
        return modes;
        }

    /**
     * @return the paddings
     */
    public String[] getPaddings()
        {
        return paddings;
        }
    
}
