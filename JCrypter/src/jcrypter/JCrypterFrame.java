/*
 * JCrypterFrame.java
 *
 * Created on 26. Juli 2008, 17:47
 * http://1x1.googlecode.com
 * GNUCrypto version: Revision 122
 * Released under Apache License
 */

package jcrypter;

import java.io.*;
import java.security.*;
import java.util.*;
import javax.swing.JOptionPane;
import org.bouncycastle.bcpg.ArmoredOutputStream;
import org.bouncycastle.crypto.*;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.crypto.engines.TwofishEngine;
import org.bouncycastle.crypto.modes.OpenPGPCFBBlockCipher;
import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.*;
import org.bouncycastle.util.encoders.Base64;

/**
 *
 * @author  uli
 */
public class JCrypterFrame extends javax.swing.JFrame {
    
    /** Creates new form JCrypterFrame */
    public JCrypterFrame() {
        //Register Bouncy castle provider
        Security.addProvider(new BouncyCastleProvider());  
        //Init the GUI components
        initComponents();
    }

    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputLabel = new javax.swing.JLabel();
        plaintextScrollPane = new javax.swing.JScrollPane();
        inputField = new javax.swing.JTextArea();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        ciphertextLabel = new javax.swing.JLabel();
        ciphertextScrollPane = new javax.swing.JScrollPane();
        outputField = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        decryptCheckbox = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadFromFileMenuItem = new javax.swing.JMenuItem();
        saveToFileMenuItem = new javax.swing.JMenuItem();
        extrasMenu = new javax.swing.JMenu();
        pgpMenuItem = new javax.swing.JMenuItem();
        cipherModeMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JCrypter");

        inputLabel.setDisplayedMnemonic('i');
        inputLabel.setLabelFor(inputField);
        inputLabel.setText("Input:");

        inputField.setColumns(20);
        inputField.setLineWrap(true);
        inputField.setRows(5);
        plaintextScrollPane.setViewportView(inputField);

        passwordLabel.setDisplayedMnemonic('p');
        passwordLabel.setLabelFor(passwordField);
        passwordLabel.setText("Password:");

        ciphertextLabel.setDisplayedMnemonic('o');
        ciphertextLabel.setLabelFor(outputField);
        ciphertextLabel.setText("Output:");

        outputField.setColumns(20);
        outputField.setEditable(false);
        outputField.setLineWrap(true);
        outputField.setRows(5);
        ciphertextScrollPane.setViewportView(outputField);

        okButton.setMnemonic('o');
        okButton.setText("OK");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        decryptCheckbox.setMnemonic('d');
        decryptCheckbox.setText("Decrypt");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        loadFromFileMenuItem.setMnemonic('l');
        loadFromFileMenuItem.setText("Load from file");
        loadFromFileMenuItem.setToolTipText("Load data from a file into the input field");
        fileMenu.add(loadFromFileMenuItem);

        saveToFileMenuItem.setMnemonic('s');
        saveToFileMenuItem.setText("Save to file");
        saveToFileMenuItem.setToolTipText("Save the data from the output field to a file");
        fileMenu.add(saveToFileMenuItem);

        menuBar.add(fileMenu);

        extrasMenu.setMnemonic('e');
        extrasMenu.setText("Extras");

        pgpMenuItem.setText("PGP");
        pgpMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pgpMenuItemMouseClicked(evt);
            }
        });
        extrasMenu.add(pgpMenuItem);

        cipherModeMenuItem.setText("Cipher and Mode");
        cipherModeMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cipherModeMenuItemMouseClicked(evt);
            }
        });
        extrasMenu.add(cipherModeMenuItem);

        menuBar.add(extrasMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passwordLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(plaintextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(decryptCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ciphertextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel)
                    .addComponent(plaintextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptCheckbox)
                    .addComponent(okButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ciphertextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ciphertextLabel))
                .addGap(63, 63, 63))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    @SuppressWarnings("empty-statement")
    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked
        
    }//GEN-LAST:event_okButtonMouseClicked

    private void pgpMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pgpMenuItemMouseClicked
        new PGPCrypterFrame().setVisible(true);
    }//GEN-LAST:event_pgpMenuItemMouseClicked

    private void cipherModeMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cipherModeMenuItemMouseClicked
        
    }//GEN-LAST:event_cipherModeMenuItemMouseClicked

    private static void processLiteralData(PGPLiteralData ld, OutputStream out, PGPOnePassSignature ops) throws IOException, SignatureException{
        InputStream unc = ld.getInputStream();
        int ch;
        if(ops==null){
            while ((ch = unc.read()) >= 0) 
                out.write(ch);
        }else{
            while ((ch = unc.read()) >= 0) {
                out.write(ch);
                ops.update((byte)ch);
            }
        }
    }
    
    private void encryptSymmetric()
    {
        try
        {
            //Bouncy castle inline using lightweight API
            BlockCipher engine = new TwofishEngine();
            BufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new OpenPGPCFBBlockCipher(engine));
            //Get data
            byte[] passwordBytes = new String(passwordField.getPassword()).getBytes();
            byte[] input;
            //Base64-decode the ciphertext
            if(decryptCheckbox.isSelected()) {input = Base64.decode(inputField.getText().getBytes());}
            else {input = inputField.getText().getBytes();}
            
            //Hash the password to fit it into the right size
            Digest digest = new SHA256Digest();
            digest.update(passwordBytes, 0, passwordBytes.length);
            byte[] keyBytes = new byte[32];
            digest.doFinal(keyBytes, 0);
            
            cipher.init(!decryptCheckbox.isSelected(), new KeyParameter(keyBytes));
            
            byte[] output = new byte[cipher.getOutputSize(input.length)];
            int outputLen = cipher.processBytes(input, 0, input.length, output, 0);
            cipher.doFinal(output, outputLen);
            //Print the output into outputField and Base64-encode if we have to encrypt
            if(decryptCheckbox.isSelected()) {outputField.setText(new String(output).trim());}
            else {outputField.setText(new String(Base64.encode(output)));}
        }
        catch(CryptoException ex) //Data not decryptible
        {
            JOptionPane.showMessageDialog(this, "Data not encrypted!", "Decryption impossible", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JCrypterFrame().setVisible(true);
            }
        });
    }
    
    //Encryption variables
    PGPKeyRingReader pkr = null;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem cipherModeMenuItem;
    private javax.swing.JLabel ciphertextLabel;
    private javax.swing.JScrollPane ciphertextScrollPane;
    private javax.swing.JCheckBox decryptCheckbox;
    private javax.swing.JMenu extrasMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextArea inputField;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JMenuItem loadFromFileMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton okButton;
    private javax.swing.JTextArea outputField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JMenuItem pgpMenuItem;
    private javax.swing.JScrollPane plaintextScrollPane;
    private javax.swing.JMenuItem saveToFileMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
